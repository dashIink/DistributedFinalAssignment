// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: metadata_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	GetTopKDatastores(ctx context.Context, in *GetTopKDatastoresRequest, opts ...grpc.CallOption) (*GetTopKDatastoresResponse, error)
	GetFileChunkLocations(ctx context.Context, in *GetFileChunkLocationsRequest, opts ...grpc.CallOption) (MetadataService_GetFileChunkLocationsClient, error)
	RegisterFileChunk(ctx context.Context, in *RegisterFileChunkRequest, opts ...grpc.CallOption) (*RegisterFileChunkResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetTopKDatastores(ctx context.Context, in *GetTopKDatastoresRequest, opts ...grpc.CallOption) (*GetTopKDatastoresResponse, error) {
	out := new(GetTopKDatastoresResponse)
	err := c.cc.Invoke(ctx, "/metadata_service.MetadataService/GetTopKDatastores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetFileChunkLocations(ctx context.Context, in *GetFileChunkLocationsRequest, opts ...grpc.CallOption) (MetadataService_GetFileChunkLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[0], "/metadata_service.MetadataService/GetFileChunkLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataServiceGetFileChunkLocationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetadataService_GetFileChunkLocationsClient interface {
	Recv() (*GetFileChunkLocationResponse, error)
	grpc.ClientStream
}

type metadataServiceGetFileChunkLocationsClient struct {
	grpc.ClientStream
}

func (x *metadataServiceGetFileChunkLocationsClient) Recv() (*GetFileChunkLocationResponse, error) {
	m := new(GetFileChunkLocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataServiceClient) RegisterFileChunk(ctx context.Context, in *RegisterFileChunkRequest, opts ...grpc.CallOption) (*RegisterFileChunkResponse, error) {
	out := new(RegisterFileChunkResponse)
	err := c.cc.Invoke(ctx, "/metadata_service.MetadataService/RegisterFileChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	GetTopKDatastores(context.Context, *GetTopKDatastoresRequest) (*GetTopKDatastoresResponse, error)
	GetFileChunkLocations(*GetFileChunkLocationsRequest, MetadataService_GetFileChunkLocationsServer) error
	RegisterFileChunk(context.Context, *RegisterFileChunkRequest) (*RegisterFileChunkResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) GetTopKDatastores(context.Context, *GetTopKDatastoresRequest) (*GetTopKDatastoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopKDatastores not implemented")
}
func (UnimplementedMetadataServiceServer) GetFileChunkLocations(*GetFileChunkLocationsRequest, MetadataService_GetFileChunkLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileChunkLocations not implemented")
}
func (UnimplementedMetadataServiceServer) RegisterFileChunk(context.Context, *RegisterFileChunkRequest) (*RegisterFileChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFileChunk not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_GetTopKDatastores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopKDatastoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetTopKDatastores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_service.MetadataService/GetTopKDatastores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetTopKDatastores(ctx, req.(*GetTopKDatastoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetFileChunkLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileChunkLocationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServiceServer).GetFileChunkLocations(m, &metadataServiceGetFileChunkLocationsServer{stream})
}

type MetadataService_GetFileChunkLocationsServer interface {
	Send(*GetFileChunkLocationResponse) error
	grpc.ServerStream
}

type metadataServiceGetFileChunkLocationsServer struct {
	grpc.ServerStream
}

func (x *metadataServiceGetFileChunkLocationsServer) Send(m *GetFileChunkLocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MetadataService_RegisterFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFileChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata_service.MetadataService/RegisterFileChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterFileChunk(ctx, req.(*RegisterFileChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata_service.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopKDatastores",
			Handler:    _MetadataService_GetTopKDatastores_Handler,
		},
		{
			MethodName: "RegisterFileChunk",
			Handler:    _MetadataService_RegisterFileChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileChunkLocations",
			Handler:       _MetadataService_GetFileChunkLocations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metadata_service.proto",
}
