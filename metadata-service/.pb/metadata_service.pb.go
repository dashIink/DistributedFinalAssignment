// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: metadata_service.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom enum for operation status.
type OperationStatus int32

const (
	OperationStatus_SUCCESS          OperationStatus = 0 // Operation was successful.
	OperationStatus_ERROR            OperationStatus = 1 // Operation encountered an error.
	OperationStatus_NOT_FOUND        OperationStatus = 2 // The requested item was not found.
	OperationStatus_ALREADY_EXISTS   OperationStatus = 3 // The item already exists.
	OperationStatus_INVALID_ARGUMENT OperationStatus = 4 // The request contained an invalid argument.
)

// Enum value maps for OperationStatus.
var (
	OperationStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
		2: "NOT_FOUND",
		3: "ALREADY_EXISTS",
		4: "INVALID_ARGUMENT",
	}
	OperationStatus_value = map[string]int32{
		"SUCCESS":          0,
		"ERROR":            1,
		"NOT_FOUND":        2,
		"ALREADY_EXISTS":   3,
		"INVALID_ARGUMENT": 4,
	}
)

func (x OperationStatus) Enum() *OperationStatus {
	p := new(OperationStatus)
	*p = x
	return p
}

func (x OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_service_proto_enumTypes[0].Descriptor()
}

func (OperationStatus) Type() protoreflect.EnumType {
	return &file_metadata_service_proto_enumTypes[0]
}

func (x OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus.Descriptor instead.
func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{0}
}

// Custom Status is used to provide detailed error statuses in response messages.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numeric error code, which should follow an established error code convention.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be descriptive and human-readable.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of strings providing additional error details. This field is optional.
	Details []string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetDetails() []string {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request to retrieve the top K datastores.
type GetTopKDatastoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K uint64 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *GetTopKDatastoresRequest) Reset() {
	*x = GetTopKDatastoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopKDatastoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKDatastoresRequest) ProtoMessage() {}

func (x *GetTopKDatastoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKDatastoresRequest.ProtoReflect.Descriptor instead.
func (*GetTopKDatastoresRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTopKDatastoresRequest) GetK() uint64 {
	if x != nil {
		return x.K
	}
	return 0
}

// Response with a list of datastore information.
type GetTopKDatastoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datastores []*DatastoreInfo `protobuf:"bytes,1,rep,name=datastores,proto3" json:"datastores,omitempty"`
	Status     *Status          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // Use standard Status message for error handling.
}

func (x *GetTopKDatastoresResponse) Reset() {
	*x = GetTopKDatastoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopKDatastoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopKDatastoresResponse) ProtoMessage() {}

func (x *GetTopKDatastoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopKDatastoresResponse.ProtoReflect.Descriptor instead.
func (*GetTopKDatastoresResponse) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTopKDatastoresResponse) GetDatastores() []*DatastoreInfo {
	if x != nil {
		return x.Datastores
	}
	return nil
}

func (x *GetTopKDatastoresResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Detailed information about a datastore.
type DatastoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatastoreId string `protobuf:"bytes,1,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"` // A unique identifier for the datastore, such as a UUID.
	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`                          // The network hostname or IP address of the datastore.
	Port        int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`                                 // The network port of the datastore.
	Capacity    int64  `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`                         // Total capacity of the datastore.
	Used        int64  `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`                                 // Space used within the datastore.
}

func (x *DatastoreInfo) Reset() {
	*x = DatastoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreInfo) ProtoMessage() {}

func (x *DatastoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreInfo.ProtoReflect.Descriptor instead.
func (*DatastoreInfo) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{3}
}

func (x *DatastoreInfo) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *DatastoreInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DatastoreInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatastoreInfo) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DatastoreInfo) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

// Request to get locations of chunks for a file.
type GetFileChunkLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId    string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	PageSize  uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // For pagination.
	PageToken uint64 `protobuf:"varint,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // For pagination.
}

func (x *GetFileChunkLocationsRequest) Reset() {
	*x = GetFileChunkLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileChunkLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileChunkLocationsRequest) ProtoMessage() {}

func (x *GetFileChunkLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileChunkLocationsRequest.ProtoReflect.Descriptor instead.
func (*GetFileChunkLocationsRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileChunkLocationsRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileChunkLocationsRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFileChunkLocationsRequest) GetPageToken() uint64 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

// Response with locations of a file chunk.
type GetFileChunkLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId       string         `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	ChunkSequence uint64         `protobuf:"varint,2,opt,name=chunk_sequence,json=chunkSequence,proto3" json:"chunk_sequence,omitempty"`
	Datastores    *DatastoreInfo `protobuf:"bytes,3,opt,name=datastores,proto3" json:"datastores,omitempty"`
	ChunkSize     int64          `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunkHash     string         `protobuf:"bytes,5,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	Status        *Status        `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // Include status in each streamed response.
}

func (x *GetFileChunkLocationResponse) Reset() {
	*x = GetFileChunkLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileChunkLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileChunkLocationResponse) ProtoMessage() {}

func (x *GetFileChunkLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileChunkLocationResponse.ProtoReflect.Descriptor instead.
func (*GetFileChunkLocationResponse) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileChunkLocationResponse) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *GetFileChunkLocationResponse) GetChunkSequence() uint64 {
	if x != nil {
		return x.ChunkSequence
	}
	return 0
}

func (x *GetFileChunkLocationResponse) GetDatastores() *DatastoreInfo {
	if x != nil {
		return x.Datastores
	}
	return nil
}

func (x *GetFileChunkLocationResponse) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *GetFileChunkLocationResponse) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *GetFileChunkLocationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Request to register a file chunk.
type RegisterFileChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatastoreId string `protobuf:"bytes,1,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	FileId      string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Sequence    uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ChunkSize   int64  `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunkHash   string `protobuf:"bytes,5,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	Timestamp   int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FileChunkId string `protobuf:"bytes,7,opt,name=file_chunk_id,json=fileChunkId,proto3" json:"file_chunk_id,omitempty"`
}

func (x *RegisterFileChunkRequest) Reset() {
	*x = RegisterFileChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFileChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFileChunkRequest) ProtoMessage() {}

func (x *RegisterFileChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFileChunkRequest.ProtoReflect.Descriptor instead.
func (*RegisterFileChunkRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterFileChunkRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *RegisterFileChunkRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *RegisterFileChunkRequest) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RegisterFileChunkRequest) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *RegisterFileChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *RegisterFileChunkRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RegisterFileChunkRequest) GetFileChunkId() string {
	if x != nil {
		return x.FileChunkId
	}
	return ""
}

// Response for registering a file chunk.
type RegisterFileChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileChunkId string  `protobuf:"bytes,1,opt,name=file_chunk_id,json=fileChunkId,proto3" json:"file_chunk_id,omitempty"`
	Status      *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterFileChunkResponse) Reset() {
	*x = RegisterFileChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFileChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFileChunkResponse) ProtoMessage() {}

func (x *RegisterFileChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFileChunkResponse.ProtoReflect.Descriptor instead.
func (*RegisterFileChunkResponse) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterFileChunkResponse) GetFileChunkId() string {
	if x != nil {
		return x.FileChunkId
	}
	return ""
}

func (x *RegisterFileChunkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_metadata_service_proto protoreflect.FileDescriptor

var file_metadata_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x28, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x01, 0x6b, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x73, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x91, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x19, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x62, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x32, 0xe8, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4b,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x4b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c,
	0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x70, 0x62, 0x3b, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_service_proto_rawDescOnce sync.Once
	file_metadata_service_proto_rawDescData = file_metadata_service_proto_rawDesc
)

func file_metadata_service_proto_rawDescGZIP() []byte {
	file_metadata_service_proto_rawDescOnce.Do(func() {
		file_metadata_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_service_proto_rawDescData)
	})
	return file_metadata_service_proto_rawDescData
}

var file_metadata_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metadata_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_metadata_service_proto_goTypes = []interface{}{
	(OperationStatus)(0),                 // 0: metadata_service.OperationStatus
	(*Status)(nil),                       // 1: metadata_service.Status
	(*GetTopKDatastoresRequest)(nil),     // 2: metadata_service.GetTopKDatastoresRequest
	(*GetTopKDatastoresResponse)(nil),    // 3: metadata_service.GetTopKDatastoresResponse
	(*DatastoreInfo)(nil),                // 4: metadata_service.DatastoreInfo
	(*GetFileChunkLocationsRequest)(nil), // 5: metadata_service.GetFileChunkLocationsRequest
	(*GetFileChunkLocationResponse)(nil), // 6: metadata_service.GetFileChunkLocationResponse
	(*RegisterFileChunkRequest)(nil),     // 7: metadata_service.RegisterFileChunkRequest
	(*RegisterFileChunkResponse)(nil),    // 8: metadata_service.RegisterFileChunkResponse
}
var file_metadata_service_proto_depIdxs = []int32{
	4, // 0: metadata_service.GetTopKDatastoresResponse.datastores:type_name -> metadata_service.DatastoreInfo
	1, // 1: metadata_service.GetTopKDatastoresResponse.status:type_name -> metadata_service.Status
	4, // 2: metadata_service.GetFileChunkLocationResponse.datastores:type_name -> metadata_service.DatastoreInfo
	1, // 3: metadata_service.GetFileChunkLocationResponse.status:type_name -> metadata_service.Status
	1, // 4: metadata_service.RegisterFileChunkResponse.status:type_name -> metadata_service.Status
	2, // 5: metadata_service.MetadataService.GetTopKDatastores:input_type -> metadata_service.GetTopKDatastoresRequest
	5, // 6: metadata_service.MetadataService.GetFileChunkLocations:input_type -> metadata_service.GetFileChunkLocationsRequest
	7, // 7: metadata_service.MetadataService.RegisterFileChunk:input_type -> metadata_service.RegisterFileChunkRequest
	3, // 8: metadata_service.MetadataService.GetTopKDatastores:output_type -> metadata_service.GetTopKDatastoresResponse
	6, // 9: metadata_service.MetadataService.GetFileChunkLocations:output_type -> metadata_service.GetFileChunkLocationResponse
	8, // 10: metadata_service.MetadataService.RegisterFileChunk:output_type -> metadata_service.RegisterFileChunkResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_metadata_service_proto_init() }
func file_metadata_service_proto_init() {
	if File_metadata_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metadata_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopKDatastoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopKDatastoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileChunkLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileChunkLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFileChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterFileChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metadata_service_proto_goTypes,
		DependencyIndexes: file_metadata_service_proto_depIdxs,
		EnumInfos:         file_metadata_service_proto_enumTypes,
		MessageInfos:      file_metadata_service_proto_msgTypes,
	}.Build()
	File_metadata_service_proto = out.File
	file_metadata_service_proto_rawDesc = nil
	file_metadata_service_proto_goTypes = nil
	file_metadata_service_proto_depIdxs = nil
}
